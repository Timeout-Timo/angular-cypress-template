- npm install -D html-webpack-plugin@4.5.2 @cypress/webpack-dev-server webpack-dev-server cypress-angular-unit-test
- cypress Ã¶ffnen
- npm install -D core-js@2.5.4 angular2-template-loader webpack@4.44.1 ts-loader@8.2.0 istanbul-instrumenter-loader
- cypress/support/index.ts bearbeiten:
  -> require('core-js/es7/reflect');
     require('cypress-angular-unit-test/support');
- webpack 4 Config aktivieren
- cypress.json bearbeiten:
  ->    "pluginsFile": "cypress/plugins/index.ts",
        "supportFile": "cypress/support/index.ts",
        "component": {
          "componentFolder": "src/app",
          "testFiles": "**/*cy-spec.ts"
        }
- cypress/plugins/index.ts bearbeiten:
  -> const { startDevServer } = require('@cypress/webpack-dev-server');
     const webpackConfig = require('./webpack.config');

     module.exports = (on, config) => {
       on('dev-server:start', (options) =>
         startDevServer({
           options,
           webpackConfig
         })
       );

       return config;
     };
- tsconfig.cy-spec.json anlegen:
  -> {
       "extends": "./tsconfig.json",
       "compilerOptions": {
         "strict": true,
         "emitDeclarationOnly": true,
         "experimentalDecorators": true,
         "allowSyntheticDefaultImports": true,
         "skipLibCheck": true,
         "types": [ "cypress" ]
       },
       "files": [
         "./src/main.ts",
         "./src/polyfills.ts"
       ],
       "include": [
         "**/*.cy-spec.ts"
       ]
     }
- tsconfig.json bearbeiten:
  ->   "references": [
         {
           "path": "./tsconfig.cy-spec.json"
         }
       ]

webpack:

const webpack = require('webpack');
const path = require('path');

module.exports = {
    mode: 'development',
    devtool: 'inline-source-map',
    resolve: {
        extensions: ['.ts', '.js'],
        modules: [path.join(__dirname, '../../src'), 'node_modules'],
    },
    module: {
        rules: [
            {
                enforce: 'pre',
                test: /\.js$/,
                loader: 'source-map-loader',
            },
            {
                test: /\.ts$/,
                // loaders: ['ts-loader', 'angular2-template-loader'],
                use: [
                    {
                        loader: 'ts-loader',
                        options: {
                            transpileOnly: true,
                        },
                    },
                    {
                        loader: 'angular2-template-loader',
                    },
                ],
                exclude: [/node_modules/, /test.ts/, /polyfills.ts/],
            },
            {
                test: /\.(js|ts)$/,
                loader: 'istanbul-instrumenter-loader',
                options: { esModules: true },
                enforce: 'post',
                include: path.join(__dirname, '../..', 'src'),
                exclude: [
                    /\.(e2e|spec)\.ts$/,
                    /node_modules/,
                    /(ngfactory|ngstyle)\.js/,
                ],
            },
            {
                // Mark files inside `@angular/core` as using SystemJS style dynamic imports.
                // Removing this will cause deprecation warnings to appear.
                test: /[\/\\]@angular[\/\\]core[\/\\].+\.js$/,
                parser: { system: true },
            },
            {
                test: /\.css$/,
                loader: 'raw-loader',
            },
            {
                test: /(\.scss|\.sass)$/,
                use: ['raw-loader', 'sass-loader'],
            },
            {
                test: /\.html$/,
                loader: 'raw-loader',
                exclude: [path.join(__dirname, '../../src/index.html')],
            },
            {
                test: /\.(jpe?g|png|gif)$/i,
                loader: 'file-loader?name=assets/images/[name].[ext]',
            },
            {
                test: /\.(mp4|webm|ogg)$/i,
                loader: 'file-loader?name=assets/videos/[name].[ext]',
            },
            {
                test: /\.svg(\?v=\d+\.\d+\.\d+)?$/,
                loader:
                    'file-loader?limit=10000&mimetype=image/svg+xml&name=assets/svgs/[name].[ext]',
            },
            {
                test: /\.eot(\?v=\d+.\d+.\d+)?$/,
                loader:
                    'file-loader?prefix=font/&limit=5000&name=assets/fonts/[name].[ext]',
            },
            {
                test: /\.(woff|woff2)$/,
                loader:
                    'file-loader?prefix=font/&limit=5000&name=assets/fonts/[name].[ext]',
            },
            {
                test: /\.ttf(\?v=\d+\.\d+\.\d+)?$/,
                loader:
                    'file-loader?limit=10000&mimetype=application/octet-stream&name=assets/fonts/[name].[ext]',
            },
        ],
    },
    plugins: [
        new webpack.DefinePlugin({
            'process.env.NODE_ENV': JSON.stringify(process.env.NODE_ENV || 'test'),
        }),
        new webpack.ContextReplacementPlugin(
            /\@angular(\\|\/)core(\\|\/)f?esm5/,
            path.join(__dirname, './src'),
        ),
    ],
    performance: {
        hints: false,
    },
    node: {
        global: true,
        crypto: 'empty',
        process: false,
        module: false,
        clearImmediate: false,
        setImmediate: false,
        fs: 'empty',
    },
};

